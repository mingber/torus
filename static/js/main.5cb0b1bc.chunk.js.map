{"version":3,"sources":["script.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["sin","Math","cos","pi","PI","VectorCyl","rho","phi","z","x","y","THREE","scene","camera","window","innerWidth","innerHeight","train","add","renderer","antialias","setPixelRatio","devicePixelRatio","setSize","vr","enabled","a","c","rhoT","u","v","zT","ParametricTorus","target","phiT","copy","Tangent","udot","vdot","VectorCart","geometry","surfaceMaterial","wireframe","surface","setTrainStuff","point","Vector3","position","normal","normalize","Normal","tangent","addVectors","multiplyScalar","up","toLook","lookAt","random","setAnimationLoop","vAccel","render","App","React","useEffect","document","body","appendChild","domElement","WEBVR","createButton","referenceSpaceType","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5cb0b1bc.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport { Vector3 } from \"three\";\n\nvar sin = Math.sin;\nvar cos = Math.cos;\n// var tan = Math.tan;\n// var sinh = Math.sinh;\n// var cosh = Math.cosh;\nvar pi = Math.PI;\n\nfunction VectorCyl(rho, phi, z) {\n  var x = rho * cos(phi);\n  var y = rho * sin(phi);\n  return new THREE.Vector3(x, y, z);\n}\n\n// function VectorSph(r, theta, phi) {\n//   var x = r * cos(phi) * sin(theta);\n//   var y = r * sin(phi) * sin(theta);\n//   var z = r * cos(theta);\n//   return new THREE.Vector3(x, y, z);\n// }\n\nfunction VectorCart(x, y, z) {\n  return new THREE.Vector3(x, y, z);\n}\n\n// function VectorTor(sigma, tau, phi) {\n//   var denom = cosh(tau) - cos(sigma);\n//   var x = (sinh(tau) * cos(phi)) / denom;\n//   var y = (sinh(tau) * sin(phi)) / denom;\n//   var z = sin(sigma) / denom;\n//   return new THREE.Vector3(x, y, z);\n// }\n\nvar scene = new THREE.Scene();\nvar camera = new THREE.PerspectiveCamera(\n  75,\n  window.innerWidth / window.innerHeight,\n  0.01,\n  1000\n);\n\nvar train = new THREE.Object3D();\nscene.add(train);\ntrain.add(camera);\n\nexport var renderer = new THREE.WebGLRenderer({ antialias: true });\nrenderer.setPixelRatio(window.devicePixelRatio);\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.vr.enabled = true;\n\nvar a = 30,\n  c = 40;\n\nfunction rhoT(u, v) {\n  return c + a * cos(2 * pi * v);\n}\nfunction phiT(u, v) {\n  return 2 * pi * (u % 1);\n}\nfunction zT(u, v) {\n  return a * sin(2 * pi * v);\n}\nfunction ParametricTorus(u, v, target) {\n  var rho = rhoT(u, v);\n  var phi = phiT(u, v);\n  var z = zT(u, v);\n  target.copy(VectorCyl(rho, phi, z));\n}\n\nfunction uAccel(u, v, udot, vdot) {\n  return (4 * pi * udot * vdot * zT(u, v)) / rhoT(u, v);\n}\n\nfunction vAccel(u, v, udot, vdot) {\n  return (-2 * pi * udot * udot * rhoT(u, v) * zT(u, v)) / (a * a);\n}\n\nfunction Normal(u, v) {\n  return VectorCyl(\n    -cos(2 * pi * v),\n    2 * pi * (u % 1),\n    -sin(2 * pi * v)\n  ).normalize();\n}\n\nfunction Tangent(u, v, udot, vdot) {\n  var x =\n    -rhoT(u, v) * sin(2 * pi * u) * udot -\n    a * sin(2 * pi * v) * cos(2 * pi * u) * vdot;\n  var y =\n    rhoT(u, v) * cos(2 * pi * u) * udot -\n    a * sin(2 * pi * v) * sin(2 * pi * u) * vdot;\n  var z = vdot * a * cos(2 * pi * v);\n  return VectorCart(x, y, z);\n}\n\nvar geometry = new THREE.ParametricGeometry(ParametricTorus, 60, 60);\n\nvar surfaceMaterial = new THREE.MeshNormalMaterial({ wireframe: true });\nvar surface = new THREE.Mesh(geometry, surfaceMaterial);\n\nscene.add(surface);\n\nfunction setTrainStuff(u, v, udot, vdot) {\n  var point = new Vector3();\n  ParametricTorus(u, v, point);\n  var position = new THREE.Vector3();\n  var normal = Normal(u, v);\n  var tangent = Tangent(u, v, udot, vdot).normalize();\n  position.addVectors(point, normal.multiplyScalar(0.3));\n  train.position.copy(position);\n  train.up.copy(normal);\n  var toLook = new THREE.Vector3();\n  toLook.addVectors(position, tangent);\n  train.lookAt(toLook);\n}\n\nvar u = Math.random(),\n  v = Math.random(),\n  udot = Math.random() / 600,\n  vdot = 1.25 / 400;\n\nsetTrainStuff(u, v, udot, vdot);\n\n// function animate() {\n//   requestAnimationFrame(animate);\n//   udot += uAccel(u, v, udot, vdot);\n//   vdot += vAccel(u, v, udot, vdot);\n//   u += udot;\n//   v += vdot;\n//   setTrainStuff(u, v, udot, vdot);\n//   render();\n// }\n\nrenderer.setAnimationLoop(() => {\n  udot += uAccel(u, v, udot, vdot);\n  vdot += vAccel(u, v, udot, vdot);\n  u += udot;\n  v += vdot;\n  setTrainStuff(u, v, udot, vdot);\n  renderer.render(scene, camera);\n});\n\n// function render() {\n//   renderer.render(scene, camera);\n// }\n\n// animate();\n","import React from \"react\";\nimport \"./App.css\";\nimport { renderer } from \"./script\";\nimport { WEBVR } from \"three/examples/jsm/vr/WebVR.js\";\n\nconst App: React.FC = () => {\n  React.useEffect(() => {\n    document.body.appendChild(renderer.domElement);\n    document.body.appendChild(\n      WEBVR.createButton(renderer, { referenceSpaceType: \"\" })\n    );\n  }, []);\n\n  return null;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}