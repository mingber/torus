{"version":3,"sources":["script.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["sin","Math","cos","PI","VectorCyl","rho","phi","z","x","y","Vector3","a","rhoT","torusPos","zT","getParametricTorus","u","v","target","Vector2","phiT","copy","geometry","ParametricGeometry","surfaceMaterial","THREE","wireframe","surface","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","train","Object3D","add","setTrainStuff","pos","vel","oldPosition","normal","normalize","tangent","torusVel","udot","vdot","getTangent","newPosition","addVectors","multiplyScalar","position","up","toLook","lookAt","trainPosition","random","trainVelocity","renderer","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","vr","enabled","setAnimationLoop","acceleration","getAcceleration","sub","render","App","React","useEffect","document","body","appendChild","domElement","WEBVR","createButton","referenceSpaceType","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f862135.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport {\n  Vector3,\n  Scene,\n  PerspectiveCamera,\n  Object3D,\n  WebGLRenderer,\n  ParametricGeometry,\n  Vector2\n} from \"three\";\n\n// math utils\nconst { sin, cos, PI } = Math;\n\nconst VectorCyl = (rho: number, phi: number, z: number): Vector3 => {\n  const x = rho * cos(phi);\n  const y = rho * sin(phi);\n\n  return new Vector3(x, y, z);\n};\n\n// sets the scale of the torus\nconst a = 45,\n  c = 60;\n\n// gets cylindrical coords from parametric torus coord\nconst rhoT = (torusPos: Vector2): number => {\n  return c + a * cos(2 * PI * torusPos.y);\n};\n\nconst phiT = (torusPos: Vector2): number => {\n  return 2 * PI * (torusPos.x % 1);\n};\n\nconst zT = (torusPos: Vector2): number => {\n  return a * sin(2 * PI * torusPos.y);\n};\n\n/** */\nconst getParametricTorus = (u: number, v: number, target: Vector3): void => {\n  const torusPos = new Vector2(u, v);\n\n  var rho = rhoT(torusPos);\n  var phi = phiT(torusPos);\n  var z = zT(torusPos);\n\n  target.copy(VectorCyl(rho, phi, z));\n};\n\n// solution to euler lagrange for torus\nconst getAcceleration = (torusPos: Vector2, torusVel: Vector2): Vector2 => {\n  const udot = torusVel.x,\n    vdot = torusVel.y;\n\n  return new Vector2(\n    (4 * PI * udot * vdot * zT(torusPos)) / rhoT(torusPos),\n    (-2 * PI * udot * udot * rhoT(torusPos) * zT(torusPos)) / (a * a)\n  );\n};\n\n/** */\nconst getNormal = (torusPos: Vector2): Vector3 =>\n  VectorCyl(\n    -cos(2 * PI * torusPos.y),\n    2 * PI * (torusPos.x % 1),\n    -sin(2 * PI * torusPos.y)\n  ).normalize();\n\n/** */\nconst getTangent = (torusPos: Vector2, torusVel: Vector2): Vector3 => {\n  const u = torusPos.x,\n    v = torusPos.y;\n  const udot = torusVel.x,\n    vdot = torusVel.y;\n\n  const x =\n    -rhoT(torusPos) * sin(2 * PI * u) * udot -\n    a * sin(2 * PI * v) * cos(2 * PI * u) * vdot;\n\n  const y =\n    rhoT(torusPos) * cos(2 * PI * u) * udot -\n    a * sin(2 * PI * v) * sin(2 * PI * u) * vdot;\n\n  const z = vdot * a * cos(2 * PI * v);\n\n  return new Vector3(x, y, z).normalize();\n};\n\nvar geometry = new ParametricGeometry(getParametricTorus, 200, 200);\n\nvar surfaceMaterial = new THREE.MeshNormalMaterial({ wireframe: true });\nvar surface = new THREE.Mesh(geometry, surfaceMaterial);\n\nconst scene = new Scene();\n\nconst camera = new PerspectiveCamera(\n  75,\n  window.innerWidth / window.innerHeight,\n  0.01,\n  1000\n);\n\nconst train = new Object3D();\nscene.add(train);\ntrain.add(camera);\n\nscene.add(surface);\n\nconst setTrainStuff = (pos: Vector2, vel: Vector2): void => {\n  const oldPosition = new Vector3();\n  getParametricTorus(pos.x, pos.y, oldPosition);\n\n  const normal = getNormal(pos);\n  const tangent = getTangent(pos, vel);\n\n  // revisit why 0.3?\n  const newPosition = new Vector3();\n  newPosition.addVectors(oldPosition, normal.multiplyScalar(0.3));\n\n  train.position.copy(newPosition);\n  train.up.copy(normal);\n\n  const toLook = new Vector3();\n  toLook.addVectors(newPosition, tangent);\n  train.lookAt(toLook);\n};\n\n// initialize position and velocity (in parametric coords)\nconst trainPosition = new Vector2(Math.random(), Math.random());\nconst trainVelocity = new Vector2(Math.random() / 10000, 1.25 / 6000);\n\nsetTrainStuff(trainPosition, trainVelocity);\n\nexport const renderer = new WebGLRenderer({ antialias: true });\nrenderer.setPixelRatio(window.devicePixelRatio);\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.vr.enabled = true;\n\nrenderer.setAnimationLoop(() => {\n  const acceleration = getAcceleration(trainPosition, trainVelocity);\n\n  trainVelocity.add(acceleration);\n  trainPosition.sub(trainVelocity);\n\n  setTrainStuff(trainPosition, trainVelocity);\n  renderer.render(scene, camera);\n});\n","import React from \"react\";\nimport \"./App.css\";\nimport { renderer } from \"./script\";\nimport { WEBVR } from \"three/examples/jsm/vr/WebVR.js\";\n\nconst App: React.FC = () => {\n  React.useEffect(() => {\n    document.body.appendChild(renderer.domElement);\n    document.body.appendChild(\n      WEBVR.createButton(renderer, { referenceSpaceType: \"\" })\n    );\n  }, []);\n\n  return null;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}